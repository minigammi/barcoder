{"version":3,"sources":["components/Barcode/Barcode.module.css","styles/CircleButton.module.css","components/Header/Header.module.css","components/Button/Button.module.css","components/AddButton/AddButton.module.css","components/Input/Input.module.css","components/Container/Container.module.css","components/ProjectsMenu/ProjectsMenu.module.css","serviceWorker.js","models/ProjectsList.ts","utils/generateId.ts","models/Barcode.ts","models/Project.ts","models/ProjectsService.ts","components/Button/Button.tsx","components/Button/index.ts","components/AddButton/AddButton.tsx","components/AddButton/index.ts","components/Input/Input.tsx","components/Input/index.ts","components/Barcode/jsBarcode.options.ts","components/Barcode/Barcode.tsx","components/Barcode/index.ts","components/Container/Container.tsx","components/Container/index.ts","components/Header/Header.tsx","components/Header/index.ts","components/ProjectsMenu/ProjectsMenu.tsx","components/ProjectsMenu/index.ts","App.tsx","index.tsx"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ProjectsList","list","index","this","selectedIndex","observable","computed","generateId","Math","floor","random","toString","Barcode","code","comment","id","Project","action","bound","name","barcodes","push","barcode","filter","b","ProjectsService","projects","localStorage","setItem","storageKey","JSON","stringify","dataString","getItem","data","parse","length","plainDataToBarcode","map","p","Button","props","children","type","title","onClick","className","primary","classNames","styles","ButtonPrimary","defaultProps","AddButton","AddButtonContainer","circleButtonStyles","CircleButton","Input","value","onChange","label","visibleOnPrint","inputClassName","Printable","maxLength","placeholder","memo","jsBarcodeOptions","encoder","code128","renderer","svgRenderer","width","height","fontSize","margins","Space","margin","style","BarcodeSpace","getSvgStyle","showSvgNode","display","observer","onRemove","svgRef","useRef","useState","setError","useEffect","JsBarcode","current","e","Hidden","BarcodeRemove","ref","BarcodeSvg","BarcodeCodeInput","target","Container","Header","HeaderTitle","HeaderContent","ProjectsMenu","projectsList","selectedProject","clear","print","project","key","removeBarcode","addBarcode","getProjects","autorun","saveProjects","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b5ea8705.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Barcode\":\"Barcode_Barcode__3yPAw\",\"BarcodeSvg\":\"Barcode_BarcodeSvg__2d1ws\",\"BarcodeSpace\":\"Barcode_BarcodeSpace__1FWtV\",\"BarcodeRemove\":\"Barcode_BarcodeRemove__3WOpM\",\"BarcodeCodeInput\":\"Barcode_BarcodeCodeInput__3xjvr\",\"Hidden\":\"Barcode_Hidden__1xyo4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CircleButton\":\"CircleButton_CircleButton__1Sc0r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__2Ju7O\",\"HeaderTitle\":\"Header_HeaderTitle__2P-6f\",\"HeaderContent\":\"Header_HeaderContent__OX7_J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__dTdoO\",\"ButtonPrimary\":\"Button_ButtonPrimary__2Enhv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddButtonContainer\":\"AddButton_AddButtonContainer__1IJvW\",\"AddButton\":\"AddButton_AddButton__3Gjq2\",\"BarcodeSpace\":\"AddButton_BarcodeSpace__rZuXz\",\"BarcodeInput\":\"AddButton_BarcodeInput__8HR5m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2QxXH\",\"Printable\":\"Input_Printable__8SV6M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__3SQ4O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProjectsMenu\":\"ProjectsMenu_ProjectsMenu__4vtwK\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\r\n * ProjectsList.\r\n */\r\n\r\nimport { computed, observable } from 'mobx';\r\nimport Project from './Project';\r\n\r\nclass ProjectsList {\r\n\r\n  @observable list: Project[] = [];\r\n  @observable selectedIndex: number = 0;\r\n\r\n  constructor(list: Project[], index: number = 0) {\r\n    this.list = list;\r\n    this.selectedIndex = index;\r\n  }\r\n\r\n  @computed get selectedProject(): Project {\r\n    return this.list[this.selectedIndex];\r\n  }\r\n\r\n}\r\n\r\nexport default ProjectsList;\r\n","/**\n * generateId.\n */\n\nfunction generateId(): string {\n  return `new_${(Math.floor((Math.random() * 1e8))).toString(16)}`;\n}\n\nexport default generateId;\n\n","/**\r\n * Barcode.\r\n */\r\n\r\nimport { observable } from 'mobx';\r\nimport generateId from '../utils/generateId';\r\n\r\nclass Barcode {\r\n\r\n  readonly id: string;\r\n  @observable code: string;\r\n  @observable comment: string;\r\n\r\n  constructor(code: string = '', comment: string = '', id?: string) {\r\n    this.id = id || generateId();\r\n    this.code = code;\r\n    this.comment = comment;\r\n  }\r\n\r\n}\r\n\r\nexport default Barcode;\r\n","/**\r\n * Project.\r\n */\r\n\r\nimport { action, observable } from 'mobx';\r\nimport Barcode from './Barcode';\r\nimport generateId from '../utils/generateId';\r\n\r\nclass Project {\r\n\r\n  readonly id: string;\r\n  @observable name: string;\r\n  @observable barcodes: Barcode[];\r\n\r\n  constructor(name: string = '', barcodes: Barcode[] = [], id?: string) {\r\n    this.id = id || generateId();\r\n    this.name = name;\r\n    this.barcodes = barcodes;\r\n  }\r\n\r\n  @action.bound clear(): this {\r\n    this.barcodes = [];\r\n    return this;\r\n  }\r\n\r\n  @action.bound addBarcode(): this {\r\n    this.barcodes.push(new Barcode());\r\n    return this;\r\n  }\r\n\r\n  removeBarcode(barcode: Barcode): this {\r\n    this.barcodes = this.barcodes.filter(b => b !== barcode);\r\n    return this;\r\n  }\r\n\r\n}\r\n\r\nexport default Project;\r\n","/**\r\n * ProjectsService.\r\n */\r\n\r\nimport Barcode from './Barcode';\r\nimport Project from './Project';\r\n\r\nclass ProjectsService {\r\n\r\n  private static storageKey: string = 'barcodes';\r\n\r\n  static saveProjects(projects: Project[]): void {\r\n    localStorage.setItem(ProjectsService.storageKey, JSON.stringify(projects))\r\n  }\r\n\r\n  static getProjects(): Project[] {\r\n    const dataString = localStorage.getItem(ProjectsService.storageKey);\r\n    const data = dataString ? JSON.parse(dataString) : [];\r\n\r\n    if (!data || data.length === 0) {\r\n      return [\r\n        new Project(),\r\n        new Project(),\r\n        new Project(),\r\n      ];\r\n    }\r\n\r\n    const plainDataToBarcode = (b: Barcode) => new Barcode(b.code, b.comment, b.id);\r\n    const plainDataToProject = (p: Project) => new Project(p.name, p.barcodes.map(plainDataToBarcode), p.id);\r\n\r\n    // Parse legacy version of storage where was only barcodes.\r\n    if (data[0].code || data[0].comment) {\r\n      return [\r\n        new Project('', data[0].map(plainDataToBarcode)),\r\n        new Project(),\r\n        new Project(),\r\n      ];\r\n    }\r\n\r\n    return data.map(plainDataToProject);\r\n  }\r\n\r\n}\r\n\r\nexport default ProjectsService;","/**\n * Button.\n */\n\nimport React, { ReactNode, ReactElement, MouseEvent } from 'react';\nimport classNames from 'classnames';\nimport styles from './Button.module.css';\n\ntype PropTypes = {\n  type?: 'button' | 'submit',\n  title?: string,\n  children: ReactNode,\n  onClick?: (event: MouseEvent) => void,\n  className?: string,\n  primary?: boolean,\n};\n\nconst defaultProps = {\n  type: 'button',\n  primary: false,\n};\n\nfunction Button(props: PropTypes): ReactElement {\n  const {\n    children,\n    type,\n    title,\n    onClick,\n    className,\n    primary,\n  } = props;\n\n  return (\n    <>\n      <button\n        type={type}\n        onClick={onClick}\n        className={classNames(styles.Button, primary && styles.ButtonPrimary, className)}\n        title={title}\n      >\n        {children}\n      </button>\n      {' '}\n    </>\n  );\n}\n\nButton.defaultProps = defaultProps;\n\nexport default Button;\n","/**\n * index.\n */\n\nimport Button from './Button';\n\nexport default Button;\n","/**\n * AddButton.\n */\n\nimport React, { MouseEvent, ReactElement } from 'react';\nimport Button from '../Button';\nimport circleButtonStyles from '../../styles/CircleButton.module.css';\nimport styles from './AddButton.module.css';\n\ntype PropTypes = {\n  onClick: (event: MouseEvent) => void,\n};\n\nfunction AddButton(props: PropTypes): ReactElement {\n  const { onClick } = props;\n  return (\n    <div className={styles.AddButtonContainer}>\n      <Button\n        className={`${styles.AddButton} ${circleButtonStyles.CircleButton}`}\n        onClick={onClick}\n        title=\"Add barcode\"\n        primary\n      >\n        +\n      </Button>\n    </div>\n  );\n}\n\nexport default AddButton;\n","/**\n * index.\n */\n\nimport AddButton from './AddButton';\n\nexport default AddButton;\n","/**\n * Input.\n */\n\nimport React, { ChangeEvent, memo, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport styles from './Input.module.css';\n\ntype PropTypes = {\n  value?: string,\n  id: string,\n  name?: string,\n  label: ReactNode,\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void,\n  className?: string,\n  visibleOnPrint?: boolean,\n};\n\nconst defaultProps = {\n  value: '',\n  visibleOnPrint: false,\n};\n\nfunction Input(props: PropTypes) {\n  const {\n    value,\n    id,\n    name = id,\n    onChange,\n    label,\n    className,\n    visibleOnPrint,\n  } = props;\n\n  const inputClassName = classNames(\n    styles.Input,\n    visibleOnPrint && !!value && styles.Printable,\n    className,\n  );\n\n  return (\n    <label className={inputClassName}>\n      <input\n        type=\"text\"\n        id={id}\n        name={name}\n        value={value}\n        onChange={onChange}\n        maxLength={25}\n        placeholder=\" \"\n      />\n      <span>{label}</span>\n    </label>\n  );\n}\n\nInput.defaultProps = defaultProps;\n\nexport default memo(Input);\n","/**\n * index.\n */\n\nimport Input from './Input';\n\nexport default Input;\n","/**\n * jsBarcode.options.\n */\n\nimport { BaseOptions } from 'jsbarcode';\nimport code128 from 'jsbarcode/lib/barcodes/CODE128/CODE128_AUTO';\nimport svgRenderer from 'jsbarcode/lib/renderers/svg';\n\ntype ExtendedOptions = BaseOptions & {\n  encoder: Function,\n  renderer: Function,\n  margins: number,\n  height: number,\n  fontSize: number,\n};\n\nconst jsBarcodeOptions: ExtendedOptions = {\n  encoder: code128,\n  renderer: svgRenderer,\n  width: 1.2,\n  height: 100,\n  fontSize: 20,\n  margins: 16,\n};\n\nexport default jsBarcodeOptions;\n","/**\n * Barcode.\n */\n\nimport React, { useRef, useEffect, useState, ReactNode, ReactElement } from 'react';\nimport { observer } from 'mobx-react';\nimport classNames from 'classnames';\nimport JsBarcode from 'jsbarcode';\nimport BarcodeModel from '../../models/Barcode';\nimport Input from '../Input';\nimport Button from '../Button';\nimport jsBarcodeOptions from './jsBarcode.options';\nimport styles from './Barcode.module.css';\nimport circleButtonStyles from '../../styles/CircleButton.module.css';\n\n\nfunction Space({ children }: { children: ReactNode }): ReactElement {\n  const margin = 16;\n  const height = jsBarcodeOptions.height\n    + (jsBarcodeOptions.margins * 2)\n    + (jsBarcodeOptions.fontSize / 2)\n    - (margin * 2);\n\n  return (\n    <div style={{ height, margin }} className={styles.BarcodeSpace}>\n      {children}\n    </div>\n  );\n}\n\nfunction getSvgStyle(showSvgNode: boolean): { display: string } {\n  return {\n    display: showSvgNode ? 'block' : 'none',\n  };\n}\n\n\ntype PropTypes = {\n  barcode: BarcodeModel,\n  onRemove: (barcode: BarcodeModel) => void,\n};\n\nfunction Barcode(props: PropTypes): ReactElement {\n  const { barcode, onRemove } = props;\n\n  const svgRef = useRef(null);\n  const [error, setError] = useState('');\n\n  const showSvgNode = !error && (!svgRef || (svgRef && !!barcode.code));\n\n  useEffect(() => {\n    if (barcode.code) {\n      try {\n        JsBarcode(svgRef.current, barcode.code, jsBarcodeOptions);\n        if (error) setError('');\n      } catch (e) {\n        setError('invalid input')\n      }\n    }\n  }, [barcode.code, error]);\n\n  const className = classNames(styles.Barcode, !showSvgNode && styles.Hidden);\n\n  return (\n    <div className={className}>\n      <Button\n        className={`${styles.BarcodeRemove} ${circleButtonStyles.CircleButton}`}\n        onClick={() => onRemove(barcode)}\n        type=\"button\"\n        title=\"Remove barcode\"\n      >\n        +\n      </Button>\n      <svg\n        ref={svgRef}\n        className={styles.BarcodeSvg}\n        style={getSvgStyle(showSvgNode)}\n      />\n      {!showSvgNode && <Space>{error || 'empty'}</Space>}\n      <Input\n        className={styles.BarcodeCodeInput}\n        id={`bci_${barcode.id}`}\n        value={barcode.code}\n        onChange={e => barcode.code = e.target.value}\n        label=\"Code\"\n      />\n      <Input\n        id={`bcc_${barcode.id}`}\n        value={barcode.comment}\n        onChange={e => barcode.comment = e.target.value}\n        label=\"Comment\"\n        visibleOnPrint\n      />\n    </div>\n  );\n}\n\nexport default observer(Barcode);\n","/**\n * index.\n */\n\nimport Barcode from './Barcode';\n\nexport default Barcode;\n","/**\n * Container.\n */\n\nimport React, { ReactElement, ReactNode } from 'react';\nimport styles from './Container.module.css';\n\ntype PropTypes = {\n  children: ReactNode,\n};\n\nfunction Container({ children }: PropTypes): ReactElement {\n  return (\n    <div className={styles.Container}>\n      {children}\n    </div>\n  );\n}\n\nexport default Container;\n","/**\n * index.\n */\n\nimport Container from './Container';\n\nexport default Container;\n","/**\n * Header.\n */\n\nimport React, { ReactElement, ReactNode } from 'react';\nimport styles from './Header.module.css';\n\ntype PropTypes = {\n  children: ReactNode,\n};\n\nfunction Header(props: PropTypes): ReactElement {\n  const { children } = props;\n\n  return (\n    <div className={styles.Header}>\n      <h1 className={styles.HeaderTitle}>Barcoder</h1>\n      <div className={styles.HeaderContent}>{children}</div>\n    </div>\n  );\n}\n\nexport default Header;\n","/**\n * index.\n */\n\nimport Header from './Header';\n\nexport default Header;\n","/**\r\n * ProjectsMenu.\r\n */\r\n\r\nimport React, { ReactNode } from 'react';\r\nimport styles from './ProjectsMenu.module.css';\r\n\r\ntype PropTypes = {\r\n  children?: ReactNode,\r\n};\r\n\r\nfunction ProjectsMenu(props: PropTypes) {\r\n  const { children } = props;\r\n\r\n  return (\r\n    <div className={styles.ProjectsMenu}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProjectsMenu;\r\n","/**\r\n * index.\r\n */\r\n\r\nimport ProjectsMenu from './ProjectsMenu';\r\n\r\nexport default ProjectsMenu;\r\n","/**\n * App.\n */\n\nimport React, { ReactElement } from 'react';\nimport { observer } from 'mobx-react';\nimport ProjectsList from './models/ProjectsList';\nimport AddButton from './components/AddButton';\nimport Barcode from './components/Barcode';\nimport Button from './components/Button';\nimport Container from './components/Container';\nimport Header from './components/Header';\nimport ProjectsMenu from './components/ProjectsMenu';\n\ntype PropTypes = {\n  projectsList: ProjectsList\n}\n\nfunction App(props: PropTypes): ReactElement {\n  const { projectsList } = props;\n\n  return (\n    <>\n      <Header>\n        <Button onClick={projectsList.selectedProject.clear}>Clear</Button>\n        <Button primary onClick={() => window.print()}>Print</Button>\n      </Header>\n      <Container>\n        <ProjectsMenu>\n          {projectsList.list.map((project, index) => (\n            <Button\n              key={index}\n              primary={index === projectsList.selectedIndex}\n              onClick={() => projectsList.selectedIndex = index}\n            >\n              {index + 1}\n            </Button>\n          ))}\n        </ProjectsMenu>\n      </Container>\n      <Container>\n        {projectsList.selectedProject.barcodes.map(barcode => (\n          <Barcode\n            key={barcode.id}\n            barcode={barcode}\n            onRemove={() => projectsList.selectedProject.removeBarcode(barcode)}\n          />\n        ))}\n      </Container>\n      <AddButton onClick={projectsList.selectedProject.addBarcode}/>\n    </>\n  );\n}\n\nexport default observer(App);\n","/**\n * index.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { autorun } from 'mobx';\nimport * as serviceWorker from './serviceWorker';\nimport ProjectsList from './models/ProjectsList';\nimport ProjectsService from './models/ProjectsService';\nimport App from './App';\nimport './index.css';\n\nconst projectsList = new ProjectsList(ProjectsService.getProjects());\nautorun(() => ProjectsService.saveProjects(projectsList.list));\n\nReactDOM.render(<App projectsList={projectsList}/>, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}